# 1. 网络体系结构

## 1.1. 计网的组成分类

> 计算机网络是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。

- 发展

  - 第一阶段：从单个网络 ARPANET 向互联网发展的过程。1983 年 TCP/IP 协议成为 ARPANET 上的标准协议。

  - 第二阶段：建成三级结构的因特网：主干网、地区网和校园网（或企业网）。

  - 第三阶段：形成多层次的**ISP**（Internet Service Provider 因特网服务提供者）结构的因特网。

    分为主干 ISP，地区 ISP，本地 ISP

- 功能

  - **数据通信**：7层模型的 **低3层**。 对应 **通信子网**
  - **资源共享**：7层模型的 **高3层**。 对应 **资源子网**

- 组成：三个角度

![](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250305134854662.png)

* 分类：

![image-20250305134524926](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250305134524926.png)

## 1.2 性能指标

- 速率（比特率）

  连接到网络上的节点在信道上传输数据的速率。也称数据率或比特率、数据传输速率

  ![image-20250305134445979](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250305134445979.png)

  

- 带宽：信道所能通过的最高数据率，bps(或b/s，bit/s)

- 吞吐量：在单位时间内通 +排队+处理

- 时延带宽积：又称为以比特为单位的链路长度。即“**某段链路现在有多少比特**”

- 往返时延RTT：表示从发送方发送完数据，到发送方收到来自接收方确认的总共经历的时间

  - RTT越大，在收到确认之前，可以发送的数据越多
  - 传播时延 * 2 + 接收方处理时间

  ![image-20250305135424538](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250305135424538.png)

- 利用率

  - 信道利用率：有数据通过时间 / 总时间
  - 网络利用率：信道利用率加权平均值

- 总结：

![image-20250305135316472](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250305135316472.png)

## 1.3 分层结构

### 基本概念

> **计算机网络体系结构**是描述网络层次划分、各层功能及协议集合的抽象框架，定义了功能实现与交互规则，而不涉及具体硬件或软件细节

![image-20250305135945006](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250305135945006.png)

> 口诀：物联网叔会使用、接网叔用

1. **实体**

在计算机网络的分层结构中，第n层中的活动元素（软硬件）通常被称为第n层实体。

不同机器上的同一层为对等层，同一层的实体称为对等实体

2. **协议**

协议是控制网络实体间通信的规则集合，水平的

> 三要素：
>
> **1. 语法**：数据与控制信息的格式。例如，协议控制信息(首部)部分占几个字节、每个字节是什么含义；协议的数据部分最多由多少字节。
>
> **2. 语义**：即需要发出何种控制信息、完成何种动作及做出何种应答。例如，协议中需要明确规定:发送方完数据后，接收方是否需要“应答”，以及应的种类有哪些(如传输成功、传输失败)
>
> **3. 同步(或时序)**：执行各种操作的条件、时序关系等，即事件实现顺序的详细说明。例如，发送方发完数据后，接收方需要立即应答。如果发送方在10秒内未收到“传输成功”应答，则发送方会再次发送数据。

3. **接口**

接口是网络分层模型中**相邻层实体**交互的逻辑接口，又称为服务访问点

4. **服务**

服务是网络某一层**为上层**提供的功能集合，通过接口供用户调用，隐藏底层实现细节

### PDU、SDU 与 PCI

1. **SDU（服务数据单元）**
   为完成用户要求的功能而传送的数据部分，也就是上层传下层的“原始数据”。

2. **PCI（协议控制信息）**
   是协议为实现数据传输所需添加的控制信息（如报文头、尾），用于管理数据的格式、顺序、差错等。

3. **PDU（协议数据单元）**
   指对等层之间传送的数据单位，由SDU和PCI组成。

> 关系公式：`n-PDU = n-SDU + n-PCI = (n-1)-SDU`
> 下层在接收到上层的`PDU`时，会将其视作自己的`SDU`，再加上本层的`PCI`构成新的`PDU`传送下去。

![image-20250305140910395](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250305140910395.png)

### OSI参考模型

![image-20250305162928819](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250305162928819.png)

### TCP/IP模型

![image-20250305163224535](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250305163224535.png)

### OSI vs TCP/IP

![image-20250305163358131](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250305163358131.png)

## 交换

![Screenshot_2025-02-18-03-11-08-275_tv.danmaku.bil](https://raw.githubusercontent.com/betteryuxuan/Image/main/Screenshot_2025-02-18-03-11-08-275_tv.danmaku.bil.jpg)

![Screenshot_2025-02-18-03-19-05-056_tv.danmaku.bil](https://raw.githubusercontent.com/betteryuxuan/Image/main/Screenshot_2025-02-18-03-19-05-056_tv.danmaku.bil.jpg)

![Screenshot_2025-02-18-03-24-50-443_tv.danmaku.bil](https://raw.githubusercontent.com/betteryuxuan/Image/main/Screenshot_2025-02-18-03-24-50-443_tv.danmaku.bil.jpg)

![Screenshot_2025-02-18-03-40-03-081_tv.danmaku.bil](https://raw.githubusercontent.com/betteryuxuan/Image/main/Screenshot_2025-02-18-03-40-03-081_tv.danmaku.bil.jpg)

# 2. 物理层

## 2.1.原理

- 信道：一条通信线路往往包含一条发送信道和一条接收信道

  - 按 传输信号 分为：模拟、数字
  - 按 传输介质 分为：无线、有线

- 通信方式：单工(单向)、半双工(可换方向，但是不能同时)、全双工(双向同时)

- 数据传输方式

  - 串行：8bit 一个一个发。速度慢，费用低，适合远距离
  - 并行：8bit 通过8条信道同时发送。速度快，费用高，适合近距离

- 实现同步的方式

  - 同步：以一个数据区块为单位，又称为**区块传输**。**先送出1个或多个同步字符**，再送出整批的数据

  - 异步：将比特**从低位到高位**分成小组进行传送，小组可以是8位或更长。发送方可以在任何时刻发送这些比特组，而接收方不知道它们会在什么时候到达。**加一个字符起始位和一个字符终止位**

- 码元：用一个**固定时长**的**信号波形**（数字脉冲），代表不同离散数值的基本波形，这个时长内的信号称为**k进制码元**，而该时长称为**码元宽度**。当码元的离散状态有M个时（M大于2），此时码元为**M进制码元**。

  > 1码元可以携带多比特的信息量。例如，在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一种代表1状态。

- 速率：单位时间内传输的数据量

  - 码元速率：单位时间信号变化次数(脉冲个数)，单位波特(Band)。码元速率与进制数无关

    > 如果画两段，就算电平不变，也算两个脉冲

  - 信息速率：单位 比特每秒(b/s)

    > 波特率为A，一个码元携带C个比特信息，那么信息速率就是A×C(b/s)

- 带宽

  - 模拟信号中：最高最低频率差值，单位Hz
  - 数字设备中：单位 比特每秒(bps)

- 公式

  - 影响失真程度的因素：码元传输速率、信号传输距离、噪声干扰、传输媒体质量

  - **奈奎斯特定理**：理想情况下，极限速率=2⋅W⋅log2V(b/s)

    > V指码元离散电平数目。W指带宽，单位Hz
    >
    > 信道频带越宽，码元携带信息越多，速率越高
    >
    > 此公式限制码元速率，没有限制信息速率

  - **香农定理**：信道极限速率=W⋅log2(1+S/N) (b/s)

    > 看见带宽单位是Hz，考虑两个定理
    >
    > 信噪比和码元信息量都给了，都算，取最小值

## 2.2.编码

- 基带信号 对应 数字信道。使用**数字发送器**编码 或 使用**调制器**调制

- 宽带信号 对应 模拟信道。使用**PCM编码器**编码 或 使用**放大器调制器**调制

  > 要求看见设备能推出来处理成了哪种信号

- 数字 -> 数字

  - 不归零 NRZ

    - 高电平1，低电平0

      > 没有检错、难以同步

  - 归零 RZ

    - 1码元内，以前半段判断。后半段必须都是0

  - 反向不归零 NRZI

    - 码元开始处，电平翻转0，电平不变1

      > 全0数据OK，全1数据难以同步

  - 曼彻斯特

    - 1码元内，前低后高为1，前高后低为0

      > 1码元内跳变2次，只传输1位。数据速率只有调制速率的12

  - 差分曼彻斯特

    - 码元开始处，不变化1，变化0。码元中间跳变

      > 常用于局域网。抗干扰性强

![image-20250311141613051](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250311141613051.png)

## 2.3 调制

- 数字 -> 模拟

  - 幅移键控 ASK：调幅
    - 0没有幅度，1有幅度
  - 频移键控FSK：调频 
    - 0低频，1高频
  - 相移键控PSK：调相 
    - 0正弦波，1余弦波
  - 正交幅度调制 QAM：调幅 + 调相
    - 如果有A种相位，每个相位B种振幅，那么状态有`A×B`种，需要`log2(A×B)`个比特
    - `1码元 = log2AB bit`
- 模拟 -> 数字

  - PCM。抽样，量化，编码。采样信号最高f采样≥2f信号最高

![image-20250315230754717](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250315230754717.png)

![image-20250315230632477](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250315230632477.png)

## 2.4 传输介质

- 导向型
  - **双绞线**
  
    屏蔽双绞线和非屏蔽双绞线（有无屏蔽层）
  
    提高绞合度，增加屏蔽层->抗电磁干扰能力强->信道噪声功率低->信道极限速率高
  
  - **同轴电缆**
    
    内导体+外导体屏蔽层
    
    抗干扰性比双绞线好，传输距离更远，价格更贵
    
    基带同轴电缆(局域网)、宽带同轴电缆(有线电视)
    
  - **光纤**
    
    纤芯（高折射率）+包层（低折射率）
    
    **单模**：纤芯更细，直径小于一个波长，只能传输一条光线，信号传输损耗低。适合远距离传输
    
    **多模**：纤芯更粗，可同时传输多条光线，信号传输损耗更高。适合较近距离传输
    
    - 损耗小、抗雷抗磁、不易窃听、小、轻
  
  **以太网对有线传输介质的命名规则**：
  
  **速度+Base+介质信息**
  
  ![image-20250315232337661](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250315232337661.png)
  
- 非导向型
  - 无线电波：所有方向，穿透力强，传输距离强，信号指向性弱
  
    手机信号，wifi 
  
  - 微波通信：固定方向，频率带宽高，保密性差
    
    - 卫星通信
      - 优点：通信容量大、距离远、覆盖广、广播通信和多址通信
      - 缺点：时延长(250-270ms)、受气候影响、误码率高、成本高
    
  - 红外线/可见光：固定方向、需要把信号转成各自的格式
  
  > 短波更适合短距离，高速通信
  > 长波更适合长距离，非直线通信
  > 长距离通信需建立中继站，短波信号指同性强，要求信号接收器对准信号源

## 2.5 接口特性

* **机械特性**：规定接口所用连接器的形状、尺寸、引脚数量和排列，以及固定和锁定装置等。例如，常见的RJ-45连接器用于双绞线连接。

* **电气特性**：规定在接口电缆各条线上出现的电压范围、阻抗匹配、传输速率和传输距离限制等参数。例如，确定信号的电压高低，以便正确传输二进制比特流。 
* **功能特性**：指明某条线上出现某一电平的电压意义，即每条物理连接线所应承担的功能。例如，某条线用于传输数据，另一条线用于传输控制信号。 
* **过程特性**：指明对于不同功能的各种可能事件的出现顺序，即在物理层面上各个操作步骤的先后顺序。例如，数据传输前需要建立连接，传输完成后需要释放连接。

## 2.5 物理层设备

1. **中继器（Repeater）**

- **端口数量**：只有两个端口。
- 工作原理
  - 通过一个端口接收信号，将收到的失真信号进行整形和再生；
  - 再通过另一个端口将再生后的信号转发出去。
  - 注意：信号再生过程中会产生一定的时延。
- **通信模式**：仅支持**半双工**通信，即两端连接的节点不能同时发送数据，否则会发生“冲突”。
- **网络分段**：中继器的两个端口分别对应两个不同的网段。

2. **集线器（Hub）**

- 基本概念
  - 集线器可以看作是具有多个端口的中继器。
- 工作原理
  - 当某个端口接收到信号后，会对信号进行整形再生；
  - 然后将再生后的 信号广播到所有其他端口。
- 通信模式
  - 各端口连接的节点同样不可同时发送数据，否则会导致冲突。
- 冲突域
  - 集线器的每个端口对应一个网段，但所有这些网段共同构成一个单一的“冲突域”，即一个端口的冲突可能会影响整个网络中的其他端口。

> 注意：
>
> ==串联限制==
>
> - **无限串联不可行**：集线器和中继器不能无限制地串联使用。过多的级联会使信号经历多次整形再生，导致信号衰减、延时累积及冲突风险增加，从而严重影响网络性能和稳定性。
>
>   ![image-20250316142830109](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250316142830109.png)
>
> ==拓扑结构与带宽共享==
>
> - 物理与逻辑拓扑
>   - **物理上**：集线器连接的网络呈**星形拓扑**，即各个节点通过集线器相互连接。
>   - **逻辑上**：尽管物理上为星形，但其工作逻辑类似于**总线型拓扑**，因为集线器将接收到的信号广播给所有端口，使各个节点共享同一传输介质。
> - **共享带宽**：由于所有连接的网段共享同一条传输介质，带宽是有限的，网络中任一节点的数据传输会占用全局带宽，可能导致传输冲突和拥塞。
>
> ==接口特性与速率兼容==
>
> - 不同传输介质
>   - 集线器可以连接不同的传输介质，这意味着所连接的各网段在物理层接口特性上可以不完全相同。
>   - 这也表明，连接在一起的网段可能采用不同的物理层协议，但在通过集线器互联后，必须协同工作。
> - 速率向下兼容
>   - 如果集线器连接的网段存在速率差异，为了保证整体网络正常通信，通常会以最低速率运行，即所有网段都“速率向下兼容”，从而避免高速网段因速率不匹配而导致数据传输问题。

# 3. 数据链路层

> **链路**（Link）是指从一个节点到相邻节点的一段物理线路（有线或无线），而中间没有任何其他的交换节点。

> **数据链路**（DataLink）是基于链路的。当在一条链路上传送数据时，除需要链路本身，还需要一些必要的通信协议来控制这些数据的传输，把实现这些协议的硬件和软件加到链路上，就构成了数据链路。

链路是物理通道，数据链路是逻辑通道。

> 数据链路层主要作用是**加强物理层传输原始比特流的功能**，将物理层提供的可能出错的物理连接改造成为**逻辑上无差错的数据链路**。

> **帧**（Frame）是数据链路层对等实体之间在水平方向进行逻辑通信的协议数据单元PDU。发送方的数据链路层给网络层交付下来的分组添加首部和尾部，使之封装成为帧，然后将帧交付给物理层进行发送。接收方的数据链路层从物理层交付上来的帧中解封出分组，并将其上交给网络层。

数据链路层功能：

1. **帧封装与拆解**
2. **差错控制**
3. **流量控制**
4. **可靠传输**
5. **流量控制**
6. **介质访问控制**

## 3.1 封装成帧

所谓封装成帧（framing)，就是给网络层交付下来的分组添加一个首部和一个尾部，这样就构成了一个帧

> 帧的首部和尾部中包含有一些重要的控制信息。例如，帧首部中往往包含帧开始符、帧的源地址和目的地址，而帧尾部中往往包含帧校验序列和帧结束符。接收方的数据链路层在收到物理层交付上来的比特流后，根据帧首部中的帧开始符和帧尾部中的帧结束符，从收到的比特流中识别出帧的开始和结束，也就是进行**帧定界**。

首尾加1字节的**帧定界符**。

帧同步：**接收方**区分出起始和终止。

**最大传送单元 MTU：**数据部分的最大长度

- **字符计数法**：帧首用**1字节**标明帧内字符数

  ![image-20250316192841342](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250316192841342.png)

- **字符填充法**：`SOH(Start Of Header)`、`EOT(End Of Transmission)`

  - 转义字节 `ESC`

    如果帧的数据部分包含“特殊字符”，则发送方需要在这些“特殊字符”前填充“转义字符”（接收方要做逆处理）

  ![image-20250316192907291](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250316192907291.png)

- **零比特填充**：帧首尾都是`01111110`

  发送方需要对帧的数据部分进行处理，每当遇到连续5个`1`，就填充一个`0`
  接受方需要对帧的数据部分进行逆处理，每当遇到连续5个`1`，就删掉后面的`0`

  HDLC协议，PPP协议

- **违规编码法**：用不存在的电平标识开始和终止

  曼彻斯特编码中电平一定跳变，不存在高高或低低

## 3.2 差错控制

![image-20250316202543168](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250316202543168.png)

> **误码率**：在某段时间内，出现传输错误的比特数量占这段时间内传输比特总数量的比例

> 接收方的数据链路层从物理层交付的比特流中提取出一个帧后，如何知道这个帧在传输过程中是否出现了误码？这就需要差错检测。

**检错技术：**

### 奇偶校验

**奇校验**：在待发送的数据后面添加1个校验位，使整个数据（包括所添加的校验位在内）中“1”的个数为奇数。
**偶校验**：在待发送的数据后面添加1个校验位，使整个数据（包括所添加的校验位在内）中“1”的个数为偶数。

例如，原始数据`0110001`中1的个数为3（奇数），则奇校验位为0，让1的个数为奇数；如果原始数据中1的个数为偶数，则校验位为1。

> 偶校验的硬件实现：各信息进行异或运算，得到的结果即为偶校验位

**缺点**：

- 只能检测出奇数个错误。如果数据在传输过程中发生偶数个错误，则校验位仍可能满足约定的奇偶性，从而无法检测到错误。

- 只能实现错误检测，通常无法纠正错误

  

### 循环冗余校验

![image-20250316213014312](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250316213014312.png)

循环冗余校验CRC的基本思想如下：

* 收发双方约定好一个生成多项式`G(X)`
* 发送方基于待发送的数据和生成多项式G(X)，计算出差错检测码，即冗余码，将冗余码添加到待发送数据的后面一起传输。
* 接收方收到数据和冗余码后，通过生成多项式`G(X)`来计算收到的数据和冗余码是否产生了误码。

* ==发送方构造==

  1. 确定K、R以及生成多项式对应的二进制码
  2. **左移R位，低位补0**：将待发送的数据作为被除数的一部分，后面添加生成多项式G(X)最高次个0以构成被除数。
  3. **相除**：生成多项式G(X)各项系数构成的比特串作为除数。进行二进制模2除法，得到商和余数。余数就是所计算出的冗余码。冗余码的长度应与生成多项式G(X)最高次数相同。
  4. 将冗余码添加到待发送数据的后面一起发送。

  模2除：与传统除法类似，但不涉及进位或借位

  模2减：按位异或

  ![image-20250316213540491](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250316213540491.png)

* ==接收方检验==
  采用二进制模2除法来计算余数

  1. 将收到的数据和冗余码整体作为被除数。

  2. 生成多项式`G(X)`各项系数构成的比特串作为除数。

  3. 进行二进制模2除法，得到商和余数。

  4. 如果余数为0，就可判定数据和冗余码中未出现误码。

     如果余数不为0，则可判定数据或冗余码中出现了误码。

  > 纠错：
  >
  > * 检测所有奇数个错误
  >
  > * 检测所有双比特错误
  >
  > * 检测所有小于等于校验位长度的连续错误、
  > * 纠正单比特错误**，满足2^R≥K+R+1

**纠错技术**：

### **海明码**

1. **基本原理**

**海明码**利用分组偶校验的思想，通过在数据中加入多个校验位，不仅能检测出错误，还能确定出错的位置。

- **分组校验**：将信息位按一定规律分组，每个组由一个校验位控制，利用偶校验（或奇校验）的方式计算校验位值。
- **错误定位**：多个校验位各自覆盖部分数据位，当传输过程中出现单个错误时，不同组的校验结果会不一致，合成的“综合校验（也称为综合症）”二进制值正好指示出错位的位置。

2. **校验位个数的确定**

设有 n 个信息位，需要 k 个校验位时，必须满足不等式
  **2^k ≥ n + k + 1**
 这个公式保证了所有可能的错误情况（包括无错误情况）都能由 k 个校验位唯一表示。

3. **校验位的分布**

在编码后的码字中，校验位放在编号为 1、2、4、8、16...（即 2 的幂次方）的位置上，其余位置填入信息位。例如，若有 4 个校验位，则它们依次占据码字的第 1、2、4、8 位。

4. **校验位的计算**

每个校验位 Pi 的计算方法如下：

- 以 Pi 所在的位数为依据，将码字中所有位置编号转换为二进制。
- 对于第 i 个校验位，它负责检查所有其二进制表示中第 i 位为 1 的码位。
- 将这些位（包括校验位自身）的值进行异或（或按偶校验规则进行求和），使得最终结果符合偶校验（或奇校验）的要求。

![image-20250316215720330](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250316215720330.png)

5. **错误检测与纠错**

- 错误检测

  在接收端，同样按照各个校验位覆盖的组重新计算校验值，将得到一组综合症（S1、S2、S3……）。

  - 如果所有综合症均为 0，则认为没有错误。

- 错误定位

  如果综合症不全为 0，将这些值组合成一个二进制数，其值正好等于出错位的编号。

  - 例如，如果 S3S2S1 = 101（二进制 5），则说明第 5 位出错。

- **纠错能力**：海明码能够纠正 1 位错误，并具有检测 2 位错误的能力。

- **补充说明**：为区分 1 位错误和 2 位错误，常会额外增加一位**全校验位**，对整个码字进行额外的偶校验。

![image-20250316220706298](https://raw.githubusercontent.com/betteryuxuan/Image/main/image-20250316220706298.png)



## 3.3 流量控制

> 链路层流量控制是点到点(两个相邻节点)，收不下就不回复
>
> 传输层流量控制是端到端(两个主机之间)，给发送方规定一个缓冲区

- 停等协议：发送窗口1，接收窗口1

  - 数据帧和ACK都需要编号
  - 信道利用率 。u=tdtd+RTT+ta。 td：发送到链路上需要的时间
  - 信道吞吐率 = 信道利用率 * 发送方发送速率

- 后退N帧 GBN：发送窗口>1，接收窗口1

  - 上层调用时会检查发送窗口是否已满。实际实现中发送方可以缓存这些数据，窗口不满时再发送

  - 累积确认，ACK n 表明接收方已经收到**n号帧和它之前的全部帧**

  - 超时后从最小号未被确认的帧开始**连续发送**![image-20220518090406586](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220518090406586.png)

  - 若采用n个比特对帧编号，那么发送窗口的尺寸 **WT≤2n−1**，防止套圈

    > 最坏情况：ACK全部丢失。假设3位编码，此时发送方重复发送0-6，接收方重复回复ACK6，直到发送方收到ACK为止

  - 由于全双工通信，有时把确认帧放在发送的数据里一起发送(**顺风车**)

    > 例：RTT 100ms，发送带宽100Mb/s，发送窗口1000，每个帧1000B，忽略确认帧发送时长。求最高发送速率
    >
    > 每100.08ms发送一整个窗口，1000×1000×8100+1000×8100×106+0≈80Mb/s

- 选择重传 SR：发送窗口>1，接收窗口>1

  - 窗口每次向前移动到最小序号的未确认帧处

  - 如果收到前一个窗口的帧，说明上次ACK丢失，重新返回ACK

  - 发送窗口最好等于接收窗口（大了会溢出，小了没意义）**WTMax=WRMax=2n−1**

    > 与GBN区别在于发送了最小编号ACK后接收窗口随即滑动。
    >
    > 最坏情况：ACK全部丢失。假设3位编码，此时发送方重复发送0-3，接收窗口在4-7，接收窗口不会再滑动，直到发送方收到ACK0为止

## 3.4.介质访问控制

> 点对点(广域网)
>
> 广播(局域网)：**典型拓扑结构**：总线型、星型(逻辑总线型)。需要介质访问控制来避免互相干扰

- 静态划分信道

  - 频分多路复用 FDM ![image-20220518122107766](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220518122107766.png)

  - 时分多路复用 TDM

     

    

    - 统计时分复用 STDM：按顺序放入缓存，一个STDM帧满了就发出

  - 波分多路复用 WDM：利用光波的不同频率

  - 码分多路复用 CDM

    - 码分多址 CDMA：要求各个站点**芯片序列正交**；线性相加后发送；分别与源站内积来分离数据

- 动态划分信道

  - 随机访问

    - ALOHA：想发就发，如果冲突会导致差错，接收方不会确认。超时即可判定发生了冲突，等待随机时长重传

      - 时隙ALOHA：把时间分为时间片(时间槽)，一旦冲突，等到下一个时间片**开始**才能重传。**吞吐量有提高**

    - CSMA：先监听，信道空闲就发送完整帧；信道忙就推迟发送。**总线型网络**

      > 没有冲突检测，发生冲突还是要把数据帧发送完。浪费

      - 1-坚持CSMA：一直监听，空闲马上传输。冲突后等待随机时长
      - 非坚持CSMA：信道忙则等待随机时长后再监听，空闲马上传输
      - p-坚持CSMA：一直监听，直到空闲。一旦空闲，以p概率发送数据，1-p的概率等到下一个时槽再发送。如果冲突，下一个时槽开始再重复上述过程

    - CSMA/CD：边发边检测，一旦冲突马上停止。常用于**半双工网络**、总线型局域网

      > 最迟一个RTT知道发生了碰撞。最差情况：A的数据刚刚到达B，B恰好刚刚开始发送，A在一个RTT(**基本退避时间**)后才能收到B的信号。

      - **截断二进制指数规避**：k为重传次数，但到10后不再增大。从[0,1,…,2k−1]随机取一个数r，避退时间就是 r 倍 单程传播时延(又名 争用期)。16次失败后报告错误
      - **最小帧长**：传输速率 * RTT。以太网规定最短帧长为64B，<它的都要填充。收到<64B的都是无效的

    - CSMA/CA

      - 空闲则发出RTS（request to send），包括源地址、目的地址、下一份数据将持续发送的时间等

      - 接收端收到RTS后，将响应CTS（clear to send）

      - 收到数据，CRC检验，正确则响应ACK

      - 发送方没收到ACK就重传，二进制指数退避，有重传上限

        > CD用于以太网，使用电压检测冲突，协议检测冲突
        >
        > CA用于无线网，多种手段检测冲突，协议避免冲突

  - 轮询访问

    - 轮询协议：老大挨个问手下要不要发送数据
    - 令牌传递协议
      - 令牌：一个特殊格式的MAC控制帧，不含任何信息。有最大持有时间
      - 要发送数据，修改令牌的标识位，把数据加在后面，传递。目的主机把帧复制下来。转一圈又传回来之后删除数据部分，把标识位改回去，传递
      - 物理 星型拓扑；逻辑 环形拓扑
      - 常用于**负载较重、通信量较大**的网络中

## 3.5.几种网络

### 3.5.1.以太网

> 802.3：以太网；802.5：令牌环网；802.8：光纤(FDDI)；802.11：无线局域网

- 使用CSMA/CD协议的网络就是以太网

- **无连接**：无握手过程；**不可靠**：发送帧无编号、接收方不确认、差错控制交给上层

- 帧格式

   

  

  - 不需要帧结束标识：采用曼码传输，电压不再变了说明传完了
  - 802.3： ![image-20220520172817998](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520172817998.png)

- 10BASE-T：传送

  基带信号

  ，使用

  无屏蔽双绞线

  ，速率

  10Mb/s

  - 特点 ![image-20220520171701569](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520171701569.png)

- 100BASE-T：支持 全双工 和 半双工，可全双工不冲突

- 吉比特：在**光纤或双绞线**上传送**1Gb/s**信号，支持 全双工 和 半双工，可全双工不冲突

- 10吉比特：在**光纤**上传送**10Gb/s**信号，只支持全双工

### 3.5.2.无线局域网

- 帧头格式 ![image-20220520173535165](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520173535165.png)
- 其他类型![image-20220520194030997](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520194030997.png)

### 3.5.3.广域网

- 广域网延迟大，带宽大，强调资源共享而不是数据传输
- PPP协议：只支持全双工
  - 帧格式 ![image-20220520200355116](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520200355116.png)
  - 状态图 ![image-20220520200036219](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520200036219.png)
  - 特点
    - 简单：对于链路层的帧，无需纠错，无需序号，无需流量控制
    - 封装成帧：帧定界符
    - 透明传输：异步线路用字节填充，同步线路用比特填充
    - 多种网络层协议
    - 多种类型链路：串行/并行，同步/异步，电/光
    - 差错检测：错就丢弃
    - 检测连接状态
    - 最大传送单元MTU
    - 网络层地址协商：知道通信双方的网络层地址
    - 数据压缩协商
  - 三个组成部分
    - 一个将IP数据报封装到串行链路（同步串行/异步串行）的方法
    - 链路控制协议LCP：建立并维护数据链路连接。**身份验证**
    - 网络控制协议NCP：支持多种网络层协议，每个不同的网络层协议都要一个相应的NCP来配置，为网络层协议建立和配置逻辑连接
- HDLC协议：不是TCP/IP协议族的，**由ISO制定**，面向比特。全双工
  - 帧格式 ![image-20220520201427752](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520201427752.png)
  - **可靠性高**：CRC检验，帧编号
  - 三种站
    - 主站：起控制作用
    - 从站：被控制，配合主站参与差错恢复等链路控制
    - 复合站：两种都行
  - 三种数据操作方式
    - 正常响应：从站发送消息要经过主站同意
    - 异步平衡：每一个复合站都可以对别的站传输数据
    - 异步响应：从站不需要经过主站同意

## 3.6.链路层设备

- 网桥：根据**目的MAC**对帧进行**转发和过滤**

  - 网段：被网桥隔开的空间，使用同一物理层设备，能够直接通讯
  - 优点：
    - 过滤通信量，增大吞吐量
    - 扩大了物理范围
    - 提高了可靠性
    - 可互连不同物理层、不同MAC子层和不同速率的以太网
  - 分类
    - 透明网桥：站点不知道帧将经过哪几个网桥，是一种即插即用设备
      - 自学习：发送帧经过网桥，网桥会把它的地址和接口存到转发表里
    - 源路由网桥：把详细的最佳路由信息（路由最少/时间最短）放在帧首部中
      - 源站向目的站**广播**发送一个**发现帧**

- 交换机：多口网桥。每一个端口都是一个冲突域

  - 直通式：查完目的地址（6B），立刻转发

    - 延迟小
    - 可靠性低，不支持不同速率的端口

  - 存储转发式：将帧放入高速缓存，并检查否正确，正确则转发，错误则丢弃

  - 冲突域：每一个节点都能收到所有帧，同一时间只能有1台设备发送信息

  - 广播域：能接收一个广播信号的范围

    > 设备对比![image-20220520204333964](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520204333964.png)

# 4.网络层

- 路由选择与分组转发
- 异构网络互联
- 拥塞控制：开环控制(静态)、闭环控制(动态)

### 4.1.转发

#### 4.1.1.协议

- 路由表：目的网络地址、目的网络子网掩码、下一跳地址
- 协议
  - IP协议
    - 首部格式 ![image-20220520211750372](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520211750372.png)
    - **首部长度×4Byte**。一般20B
    - 总长度 = 首部 + 数据，单位是字节
    - 协议字段 ![image-20220520212350605](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220520212350605.png)
    - 首部检验和：只检验首部
    - 同一数据报的分片使用同一标识。高位保留；中间位DF 1禁止分片，0允许分片；低位MF 1后面还有，0最后一片/没分片
    - 片偏移：分片后此便在原分组中相对位置，**单位8B**
  - ARP
    - 局域网查询 ![image-20220521093432058](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521093432058.png)
    - 不在一个局域网，就先查网关的MAC地址，再发送
  - DHCP
    - **应用层**协议，客户机和服务端通过**广播**交互，基于**UDP**
    - 主机 广播 DHCP发现报文
    - DHCP服务器 广播 DHCP提供报文
    - 主机 广播 DHCP请求报文
    - DHCP服务器 广播 DHCP确认报文
  - ICMP
    - 格式 ![image-20220521100022407](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521100022407.png) 报文封装在IP的数据部分
    - 差错报文
      - 不可达
      - ~~网络拥塞~~
      - TTL=0
      - 首部字段有问题
      - 重定向
    - 不应发送差错报告报文
      - 不套娃
      - 只报告第一个分片
      - 对具有组播地址的数据报都不发送ICMP差错报告报文
    - 询问报文
      - 回送请求和回答报文：ping
      - 时间戳请求和回答报文：时间同步
      - ~~掩码地址请求和回答报文、路由器询问和通告报文~~

#### 4.1.2.IP地址

- IPv4

  - 基本形式
    - 分类 ![image-20220521064954224](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521064954224.png)
    - 可用数 ![image-20220521071941733](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521071941733.png)
    - 特殊IP地址 ![image-20220521065922505](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521065922505.png)
    - 私有IP地址 ![image-20220521070800509](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521070800509.png) 路由器不转发
  - 子网划分：把主机号拆分为 子网号 和 主机号
    - 子网掩码：1对应 网络号+子网号 的位数，0对应主机号的位数
  - 无分类编址 CIDR
    - 消除传统的ABC类地址以及划分子网的概念
    - 融合子网地址与子网掩码，方便子网划分
    - 把网络前缀都相同的连续的IP地址组成一个“CIDR地址块”![image-20220521090855299](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521090855299.png)
    - **路由聚合**：前缀缩短，也就是网络地址取交集
    - **最长前缀匹配**：路由表中可能有几个匹配结果，选择网络前缀最长的

- IPv6

  - 格式 ![image-20220521102512801](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220521102512801.png)

  - 特点：地址空间更大、移除了校验和、路由器不检查扩展首部、支持即插即用

  - 与v4的区别

    - v6首部长度必须是8B整数倍，v4首部长度必须是4B整数倍
    - 地址空间从32位扩展到**128位**
    - 只能在主机处分片，**路由器不能分片**
    - ICMPv6 添加报文类型「分组过大」
    - 取消了 协议、服务类型、总长度，将扩展字段移出首部变为**扩展首部**
    - **即插即用**(自动配置)

  - 压缩形式

     

    

    - 0000 换为 0
    - 0XXX 换为 XXX
    - 000X 换为 X
    - 一连串连续的0可以被一对冒号取代(只出现一次)

  - 任意播：一对多通信，可作目的地址，一般选最近的

  - 过渡策略：

    - 双栈协议：在一台设备上**同时启用IPv4和IPv6**
    - 隧道协议：**重新封装**

#### 4.1.3.IP应用

- IP组播
  - 224.0.0.0～239.255.255.255。D类地址，不是都能用
  - MAC地址![image-20220522103338977](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522103338977.png)
  - IGMP：让路由器知道是不是某个组播组还存在
    - 要加入组播组时向组播组发送IGMP，声明要加入；本地组播路由器把成员关系发给其他组播路由器
    - 本地组播路由器周期性探寻局域网上主机，只要有一个回应就可以
  - 组播路由选择协议
    - 链路状态
    - 距离向量
    - 协议无关：稀疏、密集
- 移动IP：设备移动，IP不动![image-20220522105604633](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522105604633.png)
  - 移动过程 ![image-20220522153400356](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522153400356.png)

### 4.2.路由选择

#### 4.2.1.路由选择算法

- 静态路由
  - 简单可靠，拓扑变化不大的网络中效果好，用于军事或小型商业
  - 路由更新慢，不适用于大型网络
- 动态路由
  - 距离向量算法 RIP：全局性
  - 链路状态算法 OSPF：分散性

#### 4.2.2.路由选择协议

- 自制系统内 IGP

  - RIP：每一个路由器都维护

    从它自己到其他每一个目的网络的唯一最佳**跳数**记录

    - 一条路由最多包含15个路由器，**16跳标记为不可达**
    - 只和**相邻路由器**每**30秒**交换**自己的路由表**，超过**180秒**邻居没通告，则判定邻居没了
    - **应用层**协议，使用**UDP**传送，一次最多传送25条信息
    - 好消息传得快，坏消息传得慢

  - OSPF

    - 洪泛法向所有路由器发送信息，**广播**
    - 发送本路由器以及邻居的链路状态：费用、距离、时延、带宽
    - 只有**链路状态变化**时才发送信息
    - 算法：![image-20220522100216093](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522100216093.png)
    - **网络层**协议，使用**IP**传送
    - **30min**刷新一次；网络大时比RIP好很多；**收敛很快**

- 自制系统间 EGP

  - BGP：边界路由器，交换网络可达性信息；发生变化时才更新
  - **应用层**协议，使用**TCP**传送
  - 支持CIDR
  - 刚运行时交换整个BGP路由表。但以后只交换更新部分

### 4.3.路由器

集线器不能互联物理层不同的网段。![image-20220522154749857](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522154749857.png)

默认路由全0，路由表没有匹配就从默认路由走。

# 5.传输层

### 5.1.概述

- 主机才有的层次
- 传输层提供**进程和进程**之间的逻辑通信，网络层提供主机与主机
- 端口号
  - 服务端：熟知端口号0-1023；登记端口号1024-49151
  - 常用端口号![image-20220522165616523](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522165616523.png)
  - 客户端：49152-65535
  - 套接字：(IP,端口)，唯一标识一个主机和它上面的进程

### 5.2.UDP

- 特点
  - 面向报文，适合一次性传输少量数据的网络应用
  - 无拥塞控制，适合实时应用
- 首部格式 ![image-20220522171145693](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522171145693.png)
- UDP校验 ![image-20220522173741962](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522173741962.png)

### 5.3.TCP

- 首部格式![image-20220522203105060](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522203105060.png)

  - 确认号：期望下一次收到的，代表N-1都已经成功
  - 偏移：首部长度，**单位4B**
  - 控制位：
    - URG 紧急：不缓冲
    - ACK 确认：为1时确认号才有效
    - ~~PSH 推送：尽快接收，不等缓存填满~~
    - ~~RST 复位：连接有差错，尽快释放连接，重新传输~~
    - SYN 同步：为1时，连接请求/接受报文
    - FIN 终止：数据发完，释放连接
  - 窗口：**接收窗口**，允许对方发送的数据量
  - 紧急指针：URG=1时才有用，直接指出紧急数据的位置

- 连接管理

  - 三次握手 ![image-20220522205049445](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220522205049445.png)

  - 四次挥手

     

    

    - A发完最后一个ACK还要再等两个最长报文段寿命，防止它刚刚发送的ACK没有送到

- 可靠传输

  - 校验：和UDP一样加上伪首部计算校验码
  - 序号、确认、重传：规定时间内没收到确认就要重传已发送的报文段
    - 比期望序号大的失序报文段到达时，发送一个冗余ACK，指明下一个期待字节的序号。收到3个冗余立即重传

- 流量控制

  - 一个例子

     

    

    - A收到0窗口通知会启动计时器，到时间了会发一个0窗口的探测报文段

- 拥塞控制

  > 拥塞控制：发送站过多，数据迟迟到不了接收方
  >
  > 流量控制：发送过快，接收方缓存不够
  >
  > 讨论前提假设：不使用捎带确认，接收方窗口足够大。拥塞窗口是发送方算出来的，反映当前网络容量

  - 慢开始、拥塞避免：

    

    - 从1开始，每次乘2
    - 到门限值开始线性增大
    - 开始拥塞了，窗口改1，门限改为拥塞值的一半

  - 快重传、快恢复：

    

    - 收到3个重复确认，立即重传，窗口改为一半

# 6.应用层

- DNS

  - 域名![image-20220523085249107](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523085249107.png)
  - 递归查询：帮人帮到底
  - 迭代查询：踢皮球

- FTP

  - 使用TCP实现可靠传输
  - 控制连接**端口21**，数据传送**端口20**(主动模式用20，被动模式自行协商>1024)
  - 传输模式：文本(ASCII)、二进制

- 电子邮件![image-20220523094709705](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523094709705.png)

  - SMTP：14条命令（几个字母）和21种应答信息（三位数字代码+简单文字说明）

    > C/S方式，端口号25，TCP
    >
    > 不能传送二进制对象，只能传送7位ASCII码(不能传送其他国家文字)，服务器会拒绝过长的邮件
    >
    > ![image-20220523095529066](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523095529066.png)

  - MIME：将非ASCII转为ASCII，再使用STMP传送

  - POP3：端口号110，TCP，C/S

  - IMAP：用户先看到邮件首部，打开邮件时才下载内容

- HTTP

  - 无状态(没有记忆)，面向文本，使用Cookie保存访问记录

  - 采用TCP，但是http本身无连接

  - 连接方式

    - 非持久连接

       

      

      - 耗时2 * RTT + 传送时间

    - 持久连接：非流水线式(等到确认再传送下一个文件)、流水线式

  - 报文结构

     

    

    - 例子：![image-20220523102235893](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523102235893.png)
    - 状态码：![image-20220523102359699](https://typora-gilgamesh.oss-cn-shanghai.aliyuncs.com/img1/2022:05:23-10:31:06-image-20220523102359699.png)